# Generated by Django 5.0 on 2023-12-08 14:10

import apps.freelancer.models
import datetime
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('category', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Freelancer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone_number', models.CharField(max_length=25, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('password', models.CharField(max_length=200)),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('birth_date', models.DateField(default=datetime.date(1990, 1, 1))),
                ('avatar', models.ImageField(blank=True, upload_to='avatars/')),
                ('profession', models.CharField(default='self-taught', max_length=90)),
                ('what_i_can', models.TextField()),
                ('price', models.DecimalField(decimal_places=2, default=2.0, max_digits=10)),
                ('work_time', models.TimeField(default='00:30')),
                ('city', models.CharField(max_length=150)),
                ('balance', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('activation_code', models.CharField(blank=True, max_length=255)),
                ('is_active', models.BooleanField(default=False)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='freelancers', to='category.category')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='freelancer_users', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, error_messages={'add': 'You cannot add permission directly to users. Use groups instead.', 'remove': 'You cannot remove permission directly from users. Use groups instead.'}, help_text='Specific permissions for this user.', related_name='freelancer_users', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', apps.freelancer.models.UserManager()),
            ],
        ),
    ]
